import org.gradle.internal.util.PropertiesUtils
import java.nio.charset.StandardCharsets 

buildscript {
	repositories {
		jcenter()
	}
}

plugins {
	id "java"
	id "eclipse"
	id "groovy"
	id "io.spring.dependency-management" version "1.0.6.RELEASE"
	id "org.springframework.boot" version "2.1.3.RELEASE" apply false
	id "net.researchgate.release" version "2.6.0"
	id "com.bmuschko.docker-remote-api" version "4.4.1" apply false
	id 'project-report'
}

description = "Yona server"

allprojects {
	group = "yonadev"
}

htmlDependencyReport {
    projects = project.allprojects
}

subprojects {
	sourceCompatibility = 11.0
	targetCompatibility = 11.0
	apply plugin: "eclipse"
	apply plugin: "groovy"
	apply plugin: "io.spring.dependency-management"
	apply plugin: "org.springframework.boot"
	apply plugin: "net.researchgate.release"
	apply plugin: "com.bmuschko.docker-remote-api"

	project.ext {
		build_number = System.getenv().BUILD_NUMBER ?: 0
		docker_tag = "build-${build_number}"

		version_batch_core     = "3.0.7.RELEASE"
		version_mariadb_client = "1.5.5"

		yona_adminservice_scheme         = project.properties["yona_adminservice_scheme"]        ?: "http"
		yona_adminservice_host           = project.properties["yona_adminservice_host"]          ?: "localhost"
		yona_adminservice_port           = project.properties["yona_adminservice_port"]          ?: "8180"
		yona_adminservice_mgmt_port      = project.properties["yona_adminservice_mgmt_port"]     ?: "9080"
		yona_adminservice_debug_port     = project.properties["yona_adminservice_debug_port"]    ?: "8840"
		yona_adminservice_url            = project.properties["yona_adminservice_url"]           ?: "${yona_adminservice_scheme}://${yona_adminservice_host}:${yona_adminservice_port}"
		yona_analysisservice_scheme      = project.properties["yona_analysisservice_scheme"]     ?: "http"
		yona_analysisservice_host        = project.properties["yona_analysisservice_host"]       ?: "localhost"
		yona_analysisservice_port        = project.properties["yona_analysisservice_port"]       ?: "8181"
		yona_analysisservice_mgmt_port   = project.properties["yona_analysisservice_mgmt_port"]  ?: "9081"
		yona_analysisservice_debug_port  = project.properties["yona_analysisservice_debug_port"] ?: "8841"
		yona_analysisservice_url         = project.properties["yona_analysisservice_url"]        ?: "${yona_analysisservice_scheme}://${yona_analysisservice_host}:${yona_analysisservice_port}"
		yona_appservice_scheme           = project.properties["yona_appservice_scheme"]          ?: "http"
		yona_appservice_host             = project.properties["yona_appservice_host"]            ?: "localhost"
		yona_appservice_port             = project.properties["yona_appservice_port"]            ?: "8182"
		yona_appservice_mgmt_port        = project.properties["yona_appservice_mgmt_port"]       ?: "9082"
		yona_appservice_debug_port       = project.properties["yona_appservice_debug_port"]      ?: "8842"
		yona_appservice_url              = project.properties["yona_appservice_url"]             ?: "${yona_appservice_scheme}://${yona_appservice_host}:${yona_appservice_port}"
		yona_batchservice_scheme         = project.properties["yona_batchservice_scheme"]        ?: "http"
		yona_batchservice_host           = project.properties["yona_batchservice_host"]          ?: "localhost"
		yona_batchservice_port           = project.properties["yona_batchservice_port"]          ?: "8183"
		yona_batchservice_mgmt_port      = project.properties["yona_batchservice_mgmt_port"]     ?: "9083"
		yona_batchservice_debug_port     = project.properties["yona_batchservice_debug_port"]    ?: "8843"
		yona_batchservice_url            = project.properties["yona_batchservice_url"]           ?: "${yona_batchservice_scheme}://${yona_batchservice_host}:${yona_batchservice_port}"
		yona_enableHibernateStatsAllowed = project.properties["yona_enableHibernateStatsAllowed"]?: "false"
		yona_testServer                  = project.properties["yona_testServer"]                 ?: "false"
	}

	repositories {
		jcenter()
		maven { url "https://repo.spring.io/snapshot" }
	}

	springBoot {
		buildInfo {
			properties {
				time = null
				additional = [
					buildNumber : project.ext.build_number
				]
			}
			doLast {
				// Can be removed when we upgrade to a Spring Boot build that has this issue fixed:
				// https://github.com/spring-projects/spring-boot/issues/14494
				File propertiesFile = new File(destinationDir, 'build-info.properties')
				Properties props = new Properties()
				propertiesFile.withInputStream { props.load(it)}
				OutputStream out = new BufferedOutputStream(new FileOutputStream(propertiesFile))
				PropertiesUtils.store(props, out, "Custom generated to ensure repeatability", StandardCharsets.UTF_8, "\n");
				out.close()
			}
		}
	}

	tasks.withType(JavaCompile) {
		options.compilerArgs << '-Xlint:all,-try'
		options.deprecation = true
	}
}

eclipse {
	classpath {
		 containers.remove("org.eclipse.jdt.launching.JRE_CONTAINER")
		 containers "org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8"
	}
}

wrapper {
	gradleVersion = "5.6.4"
}
