plugins {
	id "java"
	alias(libs.plugins.spring.dependency.mgmt)
	alias(libs.plugins.spring.boot).apply(false)
	alias(libs.plugins.bmuschko.docker).apply(false)
	alias(libs.plugins.sonarqube)
	id "project-report"
}

description = "Yona server"

allprojects {
	group = "yonadev"
}

htmlDependencyReport {
	projects = project.allprojects
}

subprojects {
	java {
		toolchain {
			languageVersion = JavaLanguageVersion.of(21)
		}
	}

	apply plugin: "groovy"
	apply plugin: libs.plugins.spring.dependency.mgmt.get().pluginId
	apply plugin: libs.plugins.spring.boot.get().pluginId
	apply plugin: libs.plugins.bmuschko.docker.get().pluginId

	ext["hibernate.version"] = libs.versions.hibernate.get()
	ext["thymeleaf.version"] = libs.thymeleaf.get().versionConstraint

	// Build metadata and service config
	project.ext {
		build_id = System.getenv("BUILD_ID") ?: "local"
		docker_tag = "build-${build_id}"

		runList = project.findProperty("runList") ?: []

		// Dynamically define service properties for different services
		def defineServiceProps = { name, defaultPort, mgmtPort, debugPort ->
			def prefix = "yona_${name}service"
			ext["${prefix}_scheme"] = project.findProperty("${prefix}_scheme") ?: "http"
			ext["${prefix}_host"] = project.findProperty("${prefix}_host") ?: "localhost"
			ext["${prefix}_port"] = project.findProperty("${prefix}_port") ?: defaultPort
			ext["${prefix}_mgmt_port"] = project.findProperty("${prefix}_mgmt_port") ?: mgmtPort
			ext["${prefix}_debug_port"] = project.findProperty("${prefix}_debug_port") ?: debugPort
			ext["${prefix}_url"] = project.findProperty("${prefix}_url") ?: ext["${prefix}_scheme"] + "://" + ext["${prefix}_host"] + ":" + ext["${prefix}_port"]
		}

		defineServiceProps("admin", "8180", "9080", "8840")
		defineServiceProps("analysis", "8181", "9081", "8841")
		defineServiceProps("app", "8182", "9082", "8842")
		defineServiceProps("batch", "8183", "9083", "8843")

		yona_enableHibernateStatsAllowed = project.findProperty("yona_enableHibernateStatsAllowed") ?: "false"
		yona_testServer = project.findProperty("yona_testServer") ?: "false"
	}

	repositories {
		mavenCentral()
		maven { url "https://repo.spring.io/snapshot" }
	}

	springBoot {
		buildInfo {
			properties {
				time = null
				additional = [buildId: project.ext.build_id]
			}
		}
	}

	tasks.withType(JavaCompile).configureEach {
		options.compilerArgs << "-Xlint:all,-try"
		options.deprecation = true
	}

	dependencies {
		constraints {
			implementation("org.apache.logging.log4j:log4j-core") {
				version {
					strictly("[2.17, 3[")
					prefer("2.17.0")
				}
				because("CVE-2021-44228: Log4j vulnerable to remote code execution")
			}
		}
	}
}

sonarqube {
	properties {
		property "sonar.projectKey", "yonadev_yona-server"
		property "sonar.organization", "yonadev"
		property "sonar.host.url", "https://sonarcloud.io"
		property "sonar.modules", subprojects.collect { it.name }.join(",")
		property "sonar.exclusions", "**/generated/**,**/test/**"
	}
}
