name: Build and deploy

on:
  push:
    branches: [ master ]

defaults:
  run:
    working-directory: yona-server

jobs:
  build:
    name: Build, test and analyze
    runs-on: ubuntu-latest
    env:
      CHART: yona
      HELM_REPO: helm-charts
    if: false
    steps:
      - name: Checkout src repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of SonarQube analysis
          path: 'yona-server'
      - name: Checkout Helm chart repo
        uses: actions/checkout@v2
        with:
          repository: yonadev/${{ env.HELM_REPO }}
          path: '${{ env.HELM_REPO }}'
          token: ${{ secrets.YONA_BUILD_GITHUB_PAT }}
      - name: Set build number
        working-directory: '${{ env.HELM_REPO }}'
        run: |
          echo "BUILD_NUMBER=$(($GITHUB_RUN_NUMBER+1500))" >> $GITHUB_ENV
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Gradle packages
        uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ./gradlew check sonarqube --info
      - name: Publish unit test results
        uses: EnricoMi/publish-unit-test-result-action@v1.30
        if: always()
        with:
          files: '**/build/test-results/test/*.xml'
      - name: Publish Docker images
        run: ./gradlew -PdockerHubUserName=${{ secrets.DOCKER_HUB_USER_NAME }} -PdockerHubPassword=${{ secrets.DOCKER_HUB_PASSWORD }} -PdockerUrl=unix:///var/run/docker.sock pushDockerImage
      - name: Tag the build
        run: |
          export GIT_AUTHOR_NAME="Yona build server"
          export GIT_AUTHOR_EMAIL=dev@yona.nu
          export GIT_COMMITTER_NAME=$GIT_AUTHOR_NAME
          export GIT_COMMITTER_EMAIL=$GIT_AUTHOR_EMAIL
          git config --global user.email "${GIT_AUTHOR_EMAIL}"
          git config --global user.name "${GIT_AUTHOR_NAME}"
          git tag -a build-${BUILD_NUMBER} -m "GitHub build"
          git push https://github.com/yonadev/yona-server.git --tags
      - name: Checkout Helm chart repo
        uses: actions/checkout@v2
        with:
          repository: yonadev/${{ env.HELM_REPO }}
          path: '${{ env.HELM_REPO }}'
          token: ${{ secrets.YONA_BUILD_GITHUB_PAT }}
      - name: Set environment
        working-directory: '${{ env.HELM_REPO }}'
        run: |
          HELM_REPO_DIR=${PWD}
          echo "HELM_REPO_DIR=$HELM_REPO_DIR" >> $GITHUB_ENV
          echo "PACKAGE_DIR=${HELM_REPO_DIR}/docs" >> $GITHUB_ENV
          echo "CHART_VERSION=1.2.${BUILD_NUMBER}" >> $GITHUB_ENV
      - name: Install Helm
        uses: azure/setup-helm@v1
        with:
          version: 'v3.3.0'
      - name: Build Helm package
        working-directory: yona-server/k8s/helm
        run: |
          mkdir build
          cp -r ${CHART} build
          pushd build
          sed --in-place s/_ReplaceWithBuildNumber_/${BUILD_NUMBER}/ ${CHART}/Chart.yaml
          helm dependency update ${CHART}
          helm package -d ${PACKAGE_DIR} --version ${CHART_VERSION} ${CHART}
          popd
          pushd ${HELM_REPO_DIR}
          git add ${PACKAGE_DIR}/${CHART}-${CHART_VERSION}.tgz
          helm repo index docs --url https://yonadev.github.io/helm-charts
          export GIT_AUTHOR_NAME="Yona build server"
          export GIT_AUTHOR_EMAIL=dev@yona.nu
          export GIT_COMMITTER_NAME=$GIT_AUTHOR_NAME
          export GIT_COMMITTER_EMAIL=$GIT_AUTHOR_EMAIL
          git commit -am "Package for build ${BUILD_NUMBER}"
          git push https://github.com/yonadev/$HELM_REPO.git master
          popd

  run-int-test:
    name: Run integration tests
    runs-on: ubuntu-latest
    # needs: build
      - name: executing remote ssh commands using ssh key
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.INT_TEST_HOST }}
          username: ${{ secrets.INT_TEST_USERNAME }}
          key: ${{ secrets.INT_TEST_SSH_KEY }}
          script: whoami

INT_TEST_SSH_KEY
