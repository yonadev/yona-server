name: Build and deploy

on:
  push:
    branches: [ master ]

defaults:
  run:
    working-directory: yona-server

jobs:
  determine-build-id:
    name: Determine build ID
    runs-on: ubuntu-latest
    outputs:
      build-id: ${{ steps.set-build-id.outputs.build-id }}
    steps:
      - name: Set build ID
        id: set-build-id
        working-directory: '${{ env.HELM_REPO }}'
        run: |
          build_id=$(($GITHUB_RUN_NUMBER+1500))
          echo "::set-output name=build-id::${build_id}"

  build-check-publish:
    needs: determine-build-id
    uses: ./.github/workflows/build-check-publish.yml
    with:
      build-id: ${{ needs.determine-build-id.outputs.build-id }}
      is-pr-build: false
    secrets:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  deploy-load-test-server:
    name: Deploy load test server
    environment: load-test
    runs-on: ubuntu-latest
    env:
      KUBECONFIG: /home/bert.roos/.kube/config
    needs:
      - build-check-publish
    steps:
      - name: Checkout src repo
        uses: actions/checkout@v2
      - name: Wipe existing database
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: ${{ secrets.DEPLOYMENT_HOST }}
          username: ${{ secrets.DEPLOYMENT_USERNAME }}
          key: ${{ secrets.DEPLOYMENT_SSH_KEY }}
          proxy_host: ${{ secrets.PROXY_HOST }}
          proxy_username: ${{ secrets.PROXY_USERNAME }}
          proxy_key: ${{ secrets.PROXY_SSH_KEY }}
          script: |
            mysql -h ${{ secrets.BETA_DB_IP_ADDRESS }} -u ${{ secrets.BETA_DB_USERNAME }} -p${{ secrets.BETA_DB_PASSWORD }} -e "DROP DATABASE loadtest; CREATE DATABASE loadtest;"
      - name: Deploy Yona
        uses: ./.github/workflows/actions/deploy
        with:
          host-name: ${{ secrets.DEPLOYMENT_HOST }}
          ssh-user-name: ${{ secrets.DEPLOYMENT_USERNAME }}
          ssh-key: ${{ secrets.DEPLOYMENT_SSH_KEY }}
          proxy-host-name: ${{ secrets.PROXY_HOST }}
          proxy-ssh-user-name: ${{ secrets.PROXY_USERNAME }}
          proxy-ssh-key: ${{ secrets.PROXY_SSH_KEY }}
          kube-config: ${{ env.KUBECONFIG }}
          kube-context: beta
          kube-namespace: loadtest
          helm-release: loadtest
          build-id: ${{ needs.determine-build-id.outputs.build-id }}
          repo-number: 2
          helm-values-path: helm/values_loadtest.yaml
          gitlab-token: ${{ secrets.YONA_BUILD_GITLAB_TOKEN }}

  deploy-beta-test-server:
    name: Deploy beta test server
    environment: beta-test
    runs-on: ubuntu-latest
    env:
      KUBECONFIG: /home/bert.roos/.kube/config
    needs:
      - build-check-publish
      - deploy-load-test-server
    steps:
      - name: Checkout src repo
        uses: actions/checkout@v2
      - name: Deploy Yona
        uses: ./.github/workflows/actions/deploy
        with:
          host-name: ${{ secrets.DEPLOYMENT_HOST }}
          ssh-user-name: ${{ secrets.DEPLOYMENT_USERNAME }}
          ssh-key: ${{ secrets.DEPLOYMENT_SSH_KEY }}
          proxy-host-name: ${{ secrets.PROXY_HOST }}
          proxy-ssh-user-name: ${{ secrets.PROXY_USERNAME }}
          proxy-ssh-key: ${{ secrets.PROXY_SSH_KEY }}
          kube-config: ${{ env.KUBECONFIG }}
          kube-context: beta
          build-id: ${{ needs.determine-build-id.outputs.build-id }}
          repo-number: 2
          helm-values-path: helm/values.yaml
          gitlab-token: ${{ secrets.YONA_BUILD_GITLAB_TOKEN }}

  deploy-prod-server:
    name: Deploy production server
    environment: prod
    runs-on: ubuntu-latest
    env:
      KUBECONFIG: /home/bert.roos/.kube/config
    needs:
      - build-check-publish
      - deploy-beta-test-server
    steps:
      - name: Checkout src repo
        uses: actions/checkout@v2
      - name: Deploy Yona
        uses: ./.github/workflows/actions/deploy
        with:
          host-name: ${{ secrets.DEPLOYMENT_HOST }}
          ssh-user-name: ${{ secrets.DEPLOYMENT_USERNAME }}
          ssh-key: ${{ secrets.DEPLOYMENT_SSH_KEY }}
          proxy-host-name: ${{ secrets.PROXY_HOST }}
          proxy-ssh-user-name: ${{ secrets.PROXY_USERNAME }}
          proxy-ssh-key: ${{ secrets.PROXY_SSH_KEY }}
          kube-config: ${{ env.KUBECONFIG }}
          kube-context: prod
          build-id: ${{ needs.determine-build-id.outputs.build-id }}
          repo-number: 1
          helm-values-path: helm/values.yaml
          gitlab-token: ${{ secrets.YONA_BUILD_GITLAB_TOKEN }}
