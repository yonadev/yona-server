name: Build, check and publish

on:
  workflow_call:
    inputs:
      is-pr-build:
        required: true
        type: boolean
      build-id:
        required: true
        type: string
    secrets:
      SONAR_TOKEN:
        required: true

defaults:
  run:
    working-directory: yona-server

jobs:
  build-check-and-publish:
    name: Build, check and publish
    runs-on: ubuntu-latest
    env:
      CHART: yona
      HELM_REPO: helm-charts
    steps:
      - name: Checkout src repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of SonarQube analysis
          path: 'yona-server'
      - name: Set up JDK 11
        uses: actions/setup-java@v3.0.0
        with:
          distribution: 'zulu'
          java-version: 11
      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Gradle packages
        uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ./gradlew check sonarqube --info
      - name: Build Docker images
        run: ./gradlew -PdockerUrl=unix:///var/run/docker.sock buildDockerImage
      - name: Checkout Helm chart repo for PR
        if: ${{ inputs.is-pr-build }}
        uses: actions/checkout@v2
        with:
          repository: yonadev/${{ env.HELM_REPO }}
          path: '${{ env.HELM_REPO }}'
      - name: Checkout Helm chart repo for normal build
        if: ${{ !inputs.is-pr-build }}
        uses: actions/checkout@v2
        with:
          repository: yonadev/${{ env.HELM_REPO }}
          path: '${{ env.HELM_REPO }}'
          token: ${{ secrets.YONA_BUILD_GITHUB_PAT }}
      - name: Set environment
        working-directory: '${{ env.HELM_REPO }}'
        run: |
          HELM_REPO_DIR=${PWD}
          echo "HELM_REPO_DIR=$HELM_REPO_DIR" >> $GITHUB_ENV
          echo "PACKAGE_DIR=${HELM_REPO_DIR}/docs" >> $GITHUB_ENV
          if [[ "${{ inputs.is-pr-build}}" == "true" ]]; then
            echo "CHART_VERSION=0.0.1" >> $GITHUB_ENV
          else
            echo "CHART_VERSION=1.2.${{ inputs.build-id }}" >> $GITHUB_ENV
          fi
      - name: Set up Helm
        uses: azure/setup-helm@v1
        with:
          version: 'v3.3.0'
      - name: Build Helm package
        working-directory: yona-server/k8s/helm
        run: |
          mkdir build
          cp -r ${CHART} build
          pushd build
          sed --in-place s/_ReplaceWithBuildId_/${{ inputs.build-id }}/ ${CHART}/Chart.yaml
          helm dependency update ${CHART}
          helm package -d ${PACKAGE_DIR} --version ${CHART_VERSION} ${CHART}
          popd
      - name: Set up Minikube
        uses: manusa/actions-setup-minikube@v2.6.0
        with:
          minikube version: 'v1.25.2'
          kubernetes version: 'v1.24.0'
      - name: Deploy Yona
        run: |
          kubectl create -f k8s/01_namespace.yaml
          kubectl create -f k8s/02_storage.yaml
          helm repo add yona https://yonadev.github.io/helm-charts
          helm repo update
          cat > values.yml << EOF
          support_infrastructure:
            enabled: true

          mariadb:
            persistence:
            enabled: false

          ldap:
            enabled: false
            storage_class_name_ldap: "standard"
            storage_class_name_sldap: "standard"

          nodePorts: {}

          admin:
            act_categories_json_file : activityCategories.json

          app:
            max_users: "10000"
            test_server: true
            enable_hibernate_stats_allowed: true
          EOF

          helm upgrade --wait --install --values values.yml --namespace yona yona ${PACKAGE_DIR}/${CHART}-${CHART_VERSION}.tgz || true # TODO
          echo "*** Set context" && kubectl config set-context --current --namespace=yona
          echo "*** Get deployment" && kubectl get deployment
          echo "*** Get pods" && kubectl get pods
          echo "*** Get pending pods" && kubectl get pods --field-selector=status.phase=Pending
          echo "*** Get describe LDAP pod" && kubectl describe pods `kubectl get pods -A -o jsonpath='{range .items[*]}{.metadata.name}{"\n"}{end}' | grep ldap`
          echo "*** Get storage class" && kubectl get StorageClass
          echo "*** Get persistent volume" && kubectl get PersistentVolume

          export BUILD_ID=${{ inputs.build-id }} # Used in wait-for-services.sh
          ./scripts/wait-for-services.sh
      - name: Run integration tests
        run: ./gradlew --no-daemon -Pyona_adminservice_url=http://localhost:31000 -Pyona_analysisservice_url=http://localhost:31001 -Pyona_appservice_url=http://localhost:31002 -Pyona_batchservice_url=http://localhost:31003 intTest
      - name: Publish test results
        if: always()
        uses: EnricoMi/publish-unit-test-result-action@v1.30
        with:
          files: |
           '**/build/test-results/test/*.xml'
           '**/build/test-results/intTest/*.xml'
      - name: Publish Docker images
        if: ${{ !inputs.is-pr-build }}
        run: ./gradlew -PdockerHubUserName=${{ secrets.DOCKER_HUB_USER_NAME }} -PdockerHubPassword=${{ secrets.DOCKER_HUB_PASSWORD }} -PdockerUrl=unix:///var/run/docker.sock pushDockerImage
      - name: Publish Helm package
        if: ${{ !inputs.is-pr-build }}
        working-directory: yona-server/k8s/helm
        run: |
          pushd ${HELM_REPO_DIR}
          git add ${PACKAGE_DIR}/${CHART}-${CHART_VERSION}.tgz
          helm repo index docs --url https://yonadev.github.io/helm-charts
          export GIT_AUTHOR_NAME="Yona build server"
          export GIT_AUTHOR_EMAIL=dev@yona.nu
          export GIT_COMMITTER_NAME=$GIT_AUTHOR_NAME
          export GIT_COMMITTER_EMAIL=$GIT_AUTHOR_EMAIL
          git commit -am "Package for build ${{ inputs.build-id }}"
          git push https://github.com/yonadev/$HELM_REPO.git master
          popd
      - name: Tag the build
        if: ${{ !inputs.is-pr-build }}
        run: |
          export GIT_AUTHOR_NAME="Yona build server"
          export GIT_AUTHOR_EMAIL=dev@yona.nu
          export GIT_COMMITTER_NAME=$GIT_AUTHOR_NAME
          export GIT_COMMITTER_EMAIL=$GIT_AUTHOR_EMAIL
          git config --global user.email "${GIT_AUTHOR_EMAIL}"
          git config --global user.name "${GIT_AUTHOR_NAME}"
          git tag --force --annotate build-${{ inputs.build-id }} -m "GitHub build"
          git push https://github.com/yonadev/yona-server.git --tags
