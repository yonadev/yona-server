apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Chart.AppVersion }}-{{ .Values.global.stage | default "develop" }}-springboot
  labels:
    app: {{ template "fullname" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
data:
  application.properties: |
    {{- if .Values.spring.hazelcast.loglevel}}
    logging.level.com.hazelcast={{ .Values.spring.hazelcast.loglevel | default "info" }}
    logging.pattern.level={{ .Values.spring.logpattern | default "%5p" }}
    {{- end }}
    {{- if .Values.spring.loglevel}}
    logging.level.org.springframework={{ .Values.spring.loglevel | default "info" }}
    {{- end }}
    #spring.hazelcast.config={{ .Values.spring.hazelcast.config }}
    #hazelcast.client.config={{ .Values.spring.hazelcast.config }}
    yona.hazelcastConfigFilePath={{ .Values.spring.hazelcast.config }}
    yona.maxUsers={{ .Values.app.max_users | default "1000000" }}
    yona.testServer={{ required "True or False required for app.test_server" .Values.app.test_server }}
    yona.enableHibernateStatsAllowed={{ .Values.app.enable_hibernate_stats_allowed| default "false" }}
    yona.whiteListActiveFreeSignUp={{ required "True or False required for app.whitelist.active_free_signup" .Values.app.whitelist.active_free_signup }}
    yona.whiteListActiveInvitedUsers={{ required "True or False required for app.whitelist.active_invited_users" .Values.app.whitelist.active_invited_users }}
    yona.security.pinResetRequestConfirmationCodeDelay={{ .Values.app.security.pin_reset_request_confirmation_code_delay | default "PT1M" }}
    yona.security.dosProtectionEnabled={{ required "True or False required for app.security.dos_protection_enabled" .Values.app.security.dos_protection_enabled  }}
    yona.security.dosProtectionWindow={{ .Values.app.security.dos_protection_window | default "PT5M" }}
    yona.security.maxCreateUserAttemptsPerTimeWindow={{ .Values.app.security.max_create_user_attempts_per_time_window | default "5" }}
    yona.security.maxUpdateUserAttemptsPerTimeWindow={{ .Values.app.security.max_update_user_attempts_per_time_window | default "5" }}
    yona.analysisservice.updateSkipWindow={{ .Values.analysis.update_skip_window | default "PT1M" }}
    yona.email.enabled={{ required "True or False required for email.enabled" .Values.email.enabled }}
    yona.email.senderAddress={{ .Values.email.sender_address | default "noreply@yona.nu" }}
    yona.email.smtp.protocol={{ .Values.email.smtp_protocol | default "smtp" }}
    {{- if .Values.email.smtp_host}}
    yona.email.smtp.host={{ .Values.email.smtp_host}}
    {{- else }}
    yona.email.smtp.host="smtp.{{ .Release.Namespace }}.svc.cluster.local" }}
    {{- end }}
    {{- if .Values.email.testEmailAddress }}
    yona.email.testEmailAddress={{ .Values.email.testEmailAddress }}
    {{- end }}
    yona.email.smtp.port={{ .Values.email.smtp_port | default "587" }}
    yona.email.smtp.enableAuth={{ required "True or False required for email.smtp_enable_auth" .Values.email.smtp_enable_auth }}
    yona.email.smtp.enableStartTls={{ required "True or False required for email.smtp_enable_start_tls" .Values.email.smtp_enable_start_tls }}
    yona.email.smtp.username={{ .Values.email.smtp_username | default "noreply@example.com" }}
    yona.email.smtp.password={{ .Values.email.smtp_password | default "password" }}
    yona.email.includedMediaBaseUrl={{ .Values.email.included_media_base_url | default "https://localhost/media/" }}
    yona.ldap.enabled={{ required "True or False required for ldap.enabled" .Values.ldap.enabled }}
    {{- if .Values.ldap.url_override}}
    yona.ldap.url={{ .Values.ldap.url_override }}
    {{- else }}
    yona.ldap.url=ldap://ldap.{{ .Release.Namespace }}.svc.cluster.local:{{ .Values.ldap.port | default 389 }}
    {{- end }}
    yona.ldap.baseDn={{ .Values.ldap.dn | default "DC=example,DC=local" }}
    yona.ldap.accessUserDn={{ .Values.ldap.user_dn | default "cn=admin,dc=example,dc=local" }}
    yona.ldap.accessUserPassword={{ .Values.ldap.user_password | default "password" }}
    yona.sms.enabled= {{ required "True or False required for sms.enabled" .Values.sms.enabled }}
    yona.sms.defaultSenderNumber = {{ .Values.sms.default_sender_number | default "+12312312312" }}
    yona.sms.alphaSenderId = {{ .Values.sms.alpha_sender_id | default "Yona" }}
    yona.sms.alphaSenderSupportingCountryCallingCodes = {{ .Values.sms.alpha_sender_supporting_country_calling_codes | default "+31 +49 +33" }}
    yona.sms.plivoUrl = {{ .Values.sms.plivo_url | default "https://api.plivo.com/v1/Account/{0}/Message/" }}
    yona.sms.plivoAuthId = {{ .Values.sms.plivo_auth_id | default "authidocde" }}
    yona.sms.plivoAuthToken = {{ .Values.sms.plivo_auth_token | default "authtoken" }}
    yona.firebase.enabled = {{ .Values.firebase.enabled | default "false" }}
    yona.firebase.adminServiceAccountKeyFile = {{ .Values.firebase.admin_service_account_key_file | default "firebase-adminsdk-serviceAccountKey.json" }}
    yona.firebase.databaseUrl = {{ .Values.firebase.database_url | default "https://yona-app.firebaseio.com" }}
    yona.appleMobileConfig.signingEnabled = {{ required "True or False required for apple.enabled" .Values.apple.enabled }}
    yona.appleMobileConfig.signingKeyStoreFile = {{ .Values.apple.keystore_file | default "apple/dummy.p12" }}
    yona.appleMobileConfig.signingKeyStorePassword = {{ .Values.apple.keystore_password | default "DummyPwd" }}
    yona.appleMobileConfig.caCertificateFile={{ .Values.apple.ca_certificate_file | default "apple/AppleWWDRCA.cer" }}
    yona.appleMobileConfig.signingAlias = {{ .Values.apple.alias | default "dummy" }}
  hazelcast-client.xml: |
      <hazelcast-client xsi:schemaLocation="http://www.hazelcast.com/schema/client-config hazelcast-client-config-3.6.xsd"
                        xmlns="http://www.hazelcast.com/schema/client-config"
                        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <properties>
              <property name="hazelcast.discovery.enabled">true</property>
          </properties>
          <network>
              <aws enabled="false"/>
              <smart-routing>true</smart-routing>
              <redo-operation>true</redo-operation>
              <discovery-strategies>
                <discovery-strategy enabled="true"
                    class="com.hazelcast.kubernetes.HazelcastKubernetesDiscoveryStrategy">
                  <properties>
                    <!-- configure discovery service API lookup -->
                    <property name="service-name">hazelcast</property>
                    <property name="namespace">{{ .Release.Namespace }}</property>
                  </properties>
                </discovery-strategy>
              </discovery-strategies>
          </network>
      </hazelcast-client>

