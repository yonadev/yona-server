plugins {
	id 'java-library'
}

description = 'Core'

jar {
	baseName = 'Core'
}

configurations {
	testUtils.extendsFrom testRuntime
}

sourceSets {
	testUtils
}

task testUtilsJar(type: Jar) {
	classifier "testUtils"
	from sourceSets.testUtils.output
}

artifacts {
	testUtils testUtilsJar
}

dependencies {
	implementation libs.hazelcast
	implementation libs.hazelcastSpring
	implementation libs.hazelcast.kubernetes
	api libs.spring.boot.starter.hateoas
	api libs.spring.boot.starter.data.jpa
	api libs.spring.boot.starter.web
	implementation libs.spring.boot.starter.actuator
	implementation libs.spring.cloud.starter.sleuth
	implementation libs.spring.metrics
	implementation libs.micrometer.prometheus
	api libs.spring.context.support
	implementation libs.hibernate
	implementation libs.evo.inflector
	implementation libs.commons.validator
	implementation libs.commons.lang
	api libs.jakarta.mail
	api libs.thymeleaf
	implementation libs.spring.ldap.core
	implementation libs.springSecurityWeb
	implementation libs.springSecurityConfig
	api libs.guava
	implementation libs.libphonenumber
	implementation libs.firebase.admin

	testImplementation libs.test.spring.boot.starter.test
	testImplementation libs.test.mockito.junit.jupiter
	testImplementation libs.test.jetbrains.annotations
	testImplementation libs.test.jmockit
	testImplementation libs.test.junitJupiter
	testImplementation libs.test.hamcrestJdk8Time
	testImplementation libs.test.equalsverifier

	testUtilsImplementation libs.test.groovy
	testUtilsImplementation libs.apacheHttpMime

	// mandatory dependencies for using Spock
	testUtilsImplementation libs.test.spockCore
}

test {
	enableAssertions = true
	jvmArgs "-javaagent:${classpath.find { it.name.contains('jmockit') }.absolutePath}"
	useJUnitPlatform()
}

bootJar {
	enabled = false
}

jar {
	enabled = true
}

eclipse {
	classpath {
		plusConfigurations += [configurations.testUtilsImplementation]
	}
}
