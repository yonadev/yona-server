description = "AppService"

apply plugin: "application"

mainClassName = "nu.yona.server.AppServiceApplication"


import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage

def dockerImageName = "${project.group}/${jar.baseName}"

release {
	failOnCommitNeeded = true
	tagTemplate = "appservice-${version}"
	git {
		requireBranch = "yd-40-changes-for-building|master"
	}
}

configurations {
	providedRuntimeClasspath
	intTestImplementation.extendsFrom testImplementation
	intTestRuntimeClasspath.extendsFrom testRuntimeClasspath
}

dependencies {
	implementation project(":core")
	implementation "org.bouncycastle:bcprov-jdk15on:1.68"
	implementation "org.bouncycastle:bcpkix-jdk15on:1.69"
	runtimeClasspath project.deps.mariadbClient
	runtimeClasspath "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"
	runtimeClasspath "com.fasterxml.jackson.datatype:jackson-datatype-jdk8"
	providedRuntimeClasspath "org.springframework.boot:spring-boot-starter-tomcat"

	testImplementation project(path: ":core", configuration: "testUtils")
	testImplementation "org.apache.httpcomponents:httpmime:4.5.13"
	testImplementation "org.mockito:mockito-core"

	intTestImplementation "org.codehaus.groovy:groovy-all:3.0.8"
	intTestImplementation "org.codehaus.groovy.modules.http-builder:http-builder:0.7.1"
	intTestImplementation project.deps.spockCore
}

test {
	enableAssertions = true
}

bootRun {
	enableAssertions = true

	if (project.hasProperty("appservice.debug") || project.hasProperty("debug.all"))
	{
		jvmArgs "-Xdebug", "-Xrunjdwp:transport=dt_socket,address=" + project.ext.yona_appservice_debug_port + ",server=y,suspend=n"
	}

	systemProperties = ["server.port"    : System.getProperty("server.port", project.ext.yona_appservice_port),
						"management.port": System.getProperty("management.port", project.ext.yona_appservice_mgmt_port)]
}

docker {
	registryCredentials {
		username = project.hasProperty("dockerHubUserName") ? project.dockerHubUserName : null
		password = project.hasProperty("dockerHubPassword") ? project.dockerHubPassword : null
	}
	url = project.hasProperty("dockerUrl") ? project.dockerUrl : "http://localhost:2375"
}

task buildDockerImage(type: DockerBuildImage, dependsOn: bootJar) {
	inputDir = mkdir("build/docker")
	images = ["${dockerImageName}:${project.ext.docker_tag}"]
	doFirst {
		copy {
			from bootJar
			into inputDir
			rename "${jar.baseName}-${jar.version}-${bootJar.classifier}", "${jar.baseName}"
		}
		copy {
			from "src/main/docker/Dockerfile"
			into inputDir
		}
	}
}

task pushDockerImage(type: DockerPushImage, dependsOn: buildDockerImage) {
	images = ["${dockerImageName}:${project.ext.docker_tag}"]
}

sourceSets {
	intTest {
		java {
			compileClasspath += main.output
			runtimeClasspath += main.output
		}
	}
}

task intTest(type: Test) {
	description = "Run integration tests (located in src/intTest/...)."
	testClassesDirs = project.sourceSets.intTest.output.classesDirs
	classpath = project.sourceSets.intTest.runtimeClasspath
	useJUnitPlatform()

	systemProperties = System.getProperties()

	systemProperties = ["java.util.logging.config.file"   : "../core/src/testUtils/logging.properties",
						"yona.adminservice.url"           : project.ext.yona_adminservice_url,
						"yona.analysisservice.url"        : project.ext.yona_analysisservice_url,
						"yona.appservice.url"             : project.ext.yona_appservice_url,
						"yona.batchservice.url"           : project.ext.yona_batchservice_url,
						"yona.enableHibernateStatsAllowed": project.ext.yona_enableHibernateStatsAllowed,
						"yona.testServer"                 : project.ext.yona_testServer]
}

bootJar {
	baseName = "appservice"
	classifier = "full"
}

eclipse {
	classpath {
		plusConfigurations += [configurations.intTestImplementation]
	}
}

