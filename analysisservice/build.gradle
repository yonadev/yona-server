plugins {
	id "application"
}

description = "Analysis"

application {
	mainClass = "nu.yona.server.AnalysisServiceApplication"
}

import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage

def dockerImageName = "${project.group}/${base.archivesName.get()}"
def classifier = "full"

configurations {
	providedRuntime
	intTestImplementation.extendsFrom testImplementation
	intTestRuntime.extendsFrom testRuntime
}

dependencies {
	implementation project(":core")

	runtimeOnly libs.mariadb.client
	runtimeOnly libs.jackson.datatype.jsr310
	runtimeOnly libs.jackson.datatype.jdk8

	providedRuntime "org.springframework.boot:spring-boot-starter-tomcat"

	testImplementation project(path: ":core", configuration: "testUtils")
	testImplementation project(":core").sourceSets.test.output
	testImplementation "org.mockito:mockito-core"
	testImplementation libs.test.spring.boot.starter.test
	testImplementation libs.test.mockito.junit.jupiter
	testImplementation libs.test.jmockit

	intTestImplementation libs.test.groovy
	intTestImplementation libs.test.spock.core
}

// ---- Test Configuration ----
test {
	enableAssertions = true
	useJUnitPlatform()
	jvmArgs "-javaagent:${classpath.find { it.name.contains("jmockit") }.absolutePath}"
}

// ---- Integration Test Setup ----
sourceSets {
	intTest {
		java {
			compileClasspath += main.output
			runtimeClasspath += main.output
		}
	}
}

tasks.register("intTest", Test) {
	description = "Run integration tests (located in src/intTest/...)."
	group = "verification"
	testClassesDirs = sourceSets.intTest.output.classesDirs
	classpath = sourceSets.intTest.runtimeClasspath
	useJUnitPlatform()

	systemProperties = System.getProperties() + [
		"java.util.logging.config.file": "../core/src/testUtils/logging.properties",
		"yona.adminservice.url"		   : project.ext.yona_adminservice_url,
		"yona.analysisservice.url"	   : project.ext.yona_analysisservice_url,
		"yona.appservice.url"		   : project.ext.yona_appservice_url,
		"yona.batchservice.url"		   : project.ext.yona_batchservice_url
	]
}

// ---- Boot Run Configuration ----
bootRun {
	enableAssertions = true

	if (project.hasProperty("analysisservice.debug") || project.hasProperty("debug.all")) {
		jvmArgs = [
			"-Xdebug",
			"-Xrunjdwp:transport=dt_socket,address=${project.ext.yona_analysisservice_debug_port},server=y,suspend=n"
		]
	}

	systemProperties = [
		"server.port"	 : System.getProperty("server.port", project.ext.yona_analysisservice_port),
		"management.port": System.getProperty("management.port", project.ext.yona_analysisservice_mgmt_port)
	]
}

// ---- Jar Packaging ----
bootJar {
	archiveBaseName.set("analysisservice")
	archiveClassifier.set(classifier)
}

// ---- Docker Configuration ----
docker {
	registryCredentials {
		username = project.findProperty("dockerHubUserName")
		password = project.findProperty("dockerHubPassword")
	}
	url = project.findProperty("dockerUrl") ?: "http://localhost:2375"
}

tasks.register("buildDockerImage", DockerBuildImage) {
	dependsOn bootJar
	def dockerBuildDir = file("$buildDir/docker")
	inputDir = mkdir(dockerBuildDir)
	images = ["${dockerImageName}:${project.ext.docker_tag}"]

	doFirst {
		copy {
			from bootJar
			into dockerBuildDir
			rename("${jar.archiveBaseName.get()}-${jar.archiveVersion.get()}-${classifier}", jar.archiveBaseName.get())
		}

		copy {
			from "src/main/docker/Dockerfile"
			into dockerBuildDir
		}
	}
}

tasks.register("pushDockerImage", DockerPushImage) {
	dependsOn tasks.named("buildDockerImage")
	images = ["${dockerImageName}:${project.ext.docker_tag}"]
}
