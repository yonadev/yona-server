description = "Analysis"

apply plugin: "application"

mainClassName = "nu.yona.server.AnalysisServiceApplication"


import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage

def dockerImageName = "${project.group}/${jar.archiveBaseName}"

configurations {
	providedRuntime
	intTestImplementation.extendsFrom testImplementation
	intTestRuntime.extendsFrom testRuntime
}

dependencies {
	implementation project(":core")
	runtimeClasspath libs.mariadb.client
	runtimeClasspath libs.jackson.datatype.jsr310
	runtimeClasspath libs.jackson.datatype.jdk8
	providedRuntime "org.springframework.boot:spring-boot-starter-tomcat"

	testImplementation project(path: ":core", configuration: "testUtils")
	testImplementation project(':core').sourceSets.test.output
	testImplementation "org.mockito:mockito-core"

	testImplementation libs.test.spring.boot.starter.test
	testImplementation libs.test.mockito.junit.jupiter
	testImplementation libs.test.jmockit

	intTestImplementation libs.test.groovy
	intTestImplementation libs.test.spock.core
}

test {
	enableAssertions = true
	jvmArgs "-javaagent:${classpath.find { it.name.contains('jmockit') }.absolutePath}"
	useJUnitPlatform()
}

bootRun {
	enableAssertions = true

	if (project.hasProperty("analysisservice.debug") || project.hasProperty("debug.all"))
	{
		jvmArgs "-Xdebug", "-Xrunjdwp:transport=dt_socket,address=" + project.ext.yona_analysisservice_debug_port + ",server=y,suspend=n"
	}

	systemProperties = ["server.port"    : System.getProperty("server.port", project.ext.yona_analysisservice_port),
						"management.port": System.getProperty("management.port", project.ext.yona_analysisservice_mgmt_port)]
}

docker {
	registryCredentials {
		username = project.hasProperty("dockerHubUserName") ? project.dockerHubUserName : null
		password = project.hasProperty("dockerHubPassword") ? project.dockerHubPassword : null
	}
	url = project.hasProperty("dockerUrl") ? project.dockerUrl : "http://localhost:2375"
}

task buildDockerImage(type: DockerBuildImage, dependsOn: bootJar) {
	inputDir = mkdir("build/docker")
	images = ["${dockerImageName}:${project.ext.docker_tag}"]
	doFirst {
		copy {
			from bootJar
			into inputDir
			rename "${jar.archiveBaseName}-${jar.version}-${bootJar.archiveClassifier}", "${jar.archiveBaseName}"
		}
		copy {
			from "src/main/docker/Dockerfile"
			into inputDir
		}
	}
}

task pushDockerImage(type: DockerPushImage, dependsOn: buildDockerImage) {
	images = ["${dockerImageName}:${project.ext.docker_tag}"]
}

sourceSets {
	intTest {
		java {
			compileClasspath += main.output
			runtimeClasspath += main.output
		}
	}
}

task intTest(type: Test) {
	description = "Run integration tests (located in src/intTest/...)."
	testClassesDirs = project.sourceSets.intTest.output.classesDirs
	classpath = project.sourceSets.intTest.runtimeClasspath
	useJUnitPlatform()

	systemProperties = ["java.util.logging.config.file": "../core/src/testUtils/logging.properties",
						"yona.adminservice.url"        : project.ext.yona_adminservice_url,
						"yona.analysisservice.url"     : project.ext.yona_analysisservice_url,
						"yona.appservice.url"          : project.ext.yona_appservice_url,
						"yona.batchservice.url"        : project.ext.yona_batchservice_url]
}

bootJar {
	archiveClassifier = "full"
	archiveBaseName = "analysisservice"
}

eclipse {
	classpath {
		plusConfigurations += [configurations.intTestImplementation]
	}
}

