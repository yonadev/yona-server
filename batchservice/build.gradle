description = "Batch service"

apply plugin: "application"

import com.bmuschko.gradle.docker.tasks.container.*
import com.bmuschko.gradle.docker.tasks.image.*

jar {
	baseName = "batchservice"
}

release {
	failOnCommitNeeded = true
	tagTemplate = "batchservice-${version}"
	git {
		requireBranch = "yd-40-changes-for-building|master"
	}
}

configurations {
	providedRuntime
}

dependencies {
	compile project(":core")
	runtime "org.mariadb.jdbc:mariadb-java-client:$project.ext.version_mariadb_client"
	compile "org.springframework.batch:spring-batch-core:$project.ext.version_batch_core"
	compile "org.quartz-scheduler:quartz:2.2.3"
	providedRuntime "org.springframework.boot:spring-boot-starter-tomcat"
}

test {
	enableAssertions = true
}

bootRun {
	enableAssertions = true

	if ( project.hasProperty("batchservice.debug") || project.hasProperty("debug.all")) {
		jvmArgs "-Xdebug", "-Xrunjdwp:transport=dt_socket,address=" + project.ext.yona_batchservice_debug_port + ",server=y,suspend=n"
	}

	systemProperties = [
		"server.port": System.getProperty("server.port", project.ext.yona_batchservice_port),
		"management.port": System.getProperty("management.port", project.ext.yona_batchservice_mgmt_port)
	]
}

docker {
	registryCredentials {
		username = project.hasProperty("dockerHubUserName")? project.dockerHubUserName : null
		password = project.hasProperty("dockerHubPassword")? project.dockerHubPassword : null
	}
	url = project.hasProperty("dockerUrl")? project.dockerUrl : "http://localhost:2375"
}

task buildDockerImage(type: DockerBuildImage, dependsOn: bootRepackage) {
	inputDir = mkdir("build/docker")
	tag = "${project.group}/${jar.baseName}"
	doFirst {
		copy {
			from bootRepackage
			into inputDir
			rename "${jar.baseName}-${jar.version}-${bootRepackage.classifier}", "${jar.baseName}"
		}
		copy {
			from "src/main/docker/Dockerfile"
			into "$inputDir"
		}
	}
}

task pushDockerImage(type: DockerPushImage, dependsOn: buildDockerImage) {
	imageName = "${project.group}/${jar.baseName}"
	tag = "latest"
}

sourceSets {
	intTest {
		java {
			compileClasspath += main.output
			runtimeClasspath += main.output
		}
	}
}

configurations {
	intTestCompile.extendsFrom testCompile
	intTestRuntime.extendsFrom testRuntime
}

task intTest(type:Test){
	description = "Run integration tests (located in src/intTest/...)."
	testClassesDir = project.sourceSets.intTest.output.classesDir
	classpath = project.sourceSets.intTest.runtimeClasspath
}

bootRepackage {
	classifier = "full"
}
