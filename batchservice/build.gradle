description = "Batch service"

apply plugin: "application"

mainClassName = "nu.yona.server.BatchServiceApplication"


import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage

def dockerImageName = "${project.group}/${project.archivesBaseName}"
def classifier = "full"

configurations {
	providedRuntime
}

dependencies {
	implementation project(":core")
	implementation libs.spring.batch.core
	implementation libs.quartz
	runtimeClasspath libs.mariadb.client
	providedRuntime "org.springframework.boot:spring-boot-starter-tomcat"
}

test {
	enableAssertions = true
}

bootRun {
	enableAssertions = true

	if (project.hasProperty("batchservice.debug") || project.hasProperty("debug.all"))
	{
		jvmArgs "-Xdebug", "-Xrunjdwp:transport=dt_socket,address=" + project.ext.yona_batchservice_debug_port + ",server=y,suspend=n"
	}

	systemProperties = ["server.port"    : System.getProperty("server.port", project.ext.yona_batchservice_port),
						"management.port": System.getProperty("management.port", project.ext.yona_batchservice_mgmt_port)]
}

docker {
	registryCredentials {
		username = project.hasProperty("dockerHubUserName") ? project.dockerHubUserName : null
		password = project.hasProperty("dockerHubPassword") ? project.dockerHubPassword : null
	}
	url = project.hasProperty("dockerUrl") ? project.dockerUrl : "http://localhost:2375"
}

task buildDockerImage(type: DockerBuildImage, dependsOn: bootJar) {
	inputDir = mkdir("build/docker")
	images = ["${dockerImageName}:${project.ext.docker_tag}"]
	doFirst {
		copy {
			from bootJar
			into inputDir
			rename "${jar.archiveBaseName.getOrNull()}-${jar.archiveVersion.getOrNull()}-${classifier}", "${jar.archiveBaseName.getOrNull()}"
		}
		copy {
			from "src/main/docker/Dockerfile"
			into inputDir
		}
	}
}

task pushDockerImage(type: DockerPushImage, dependsOn: buildDockerImage) {
	images = ["${dockerImageName}:${project.ext.docker_tag}"]
}

sourceSets {
	intTest {
		java {
			compileClasspath += main.output
			runtimeClasspath += main.output
		}
	}
}

configurations {
	intTestCompile.extendsFrom testCompile
	intTestRuntime.extendsFrom testRuntime
}

task intTest(type: Test) {
	description = "Run integration tests (located in src/intTest/...)."
	testClassesDirs = project.sourceSets.intTest.output.classesDirs
	classpath = project.sourceSets.intTest.runtimeClasspath
	useJUnitPlatform()
}

bootJar {
	archiveBaseName = "batchservice"
	archiveClassifier = classifier
}
