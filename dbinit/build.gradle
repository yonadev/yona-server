description = "Database initializer"

apply from: "liquibase.gradle"

import com.bmuschko.gradle.docker.tasks.container.*
import com.bmuschko.gradle.docker.tasks.image.*

def dockerImageName = "${project.group}/yona-mariadb-liquibase-update"

release {
	failOnCommitNeeded = true
	tagTemplate = "adminservice-${version}"
	git {
		requireBranch = "yd-40-changes-for-building|master"
	}
}

dependencies {
	compile project(":core")
	runtime "org.mariadb.jdbc:mariadb-java-client:$project.ext.version_mariadb_client"
	compile "org.springframework.batch:spring-batch-core:$project.ext.version_batch_core"
	compile "org.liquibase:liquibase-core:3.6.3"
}

docker {
	registryCredentials {
		username = project.hasProperty("dockerHubUserName")? project.dockerHubUserName : null
		password = project.hasProperty("dockerHubPassword")? project.dockerHubPassword : null
	}
	url = project.hasProperty("dockerUrl")? project.dockerUrl : "http://localhost:2375"
}

task buildDockerImage(type: DockerBuildImage) {
	inputDir = mkdir("build/docker")
	images = [ "${dockerImageName}:${project.ext.docker_tag}" ]
	doFirst {
		copy {
			from "src/main/liquibase"
			into "$inputDir.asFile.orNull/changelogs"
			exclude "liquibase-task.properties"
		}
		copy {
			from "src/main/docker/Dockerfile"
			from "src/main/docker/update.sh"
			into inputDir
		}
	}
}

task pushDockerImage(type: DockerPushImage, dependsOn: buildDockerImage) {
	images = [ "${dockerImageName}:${project.ext.docker_tag}" ]
}

task pathingJar(type: Jar) {
	dependsOn configurations.runtime	
	appendix = 'pathing'	
	doFirst {	
		manifest {	
			attributes "Class-Path": configurations.runtime.files.collect {	
				it.toURL().toString().replaceFirst(/file:\/+/, '/')	
			}.join(' ')	
		}	
	}	
}	

bootRun {	
	dependsOn pathingJar	
	doFirst {	
		classpath = files(sourceSets.main.output.files, pathingJar.archivePath)	
	}	
	enableAssertions = true	
}	

bootJar {	
	classifier = "full"	
}
