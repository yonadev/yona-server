description = "Database initializer"
apply plugin: libs.plugins.liquibase.get().pluginId

import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage

def dockerImageName = "${project.group}/yona-mariadb-liquibase-update"
Properties applicationProps = new Properties()
applicationProps.load(new FileInputStream("core/src/main/resources/application.properties"))

dependencies {
	implementation project(":core")
	implementation libs.spring.batch.core
	runtimeClasspath libs.mariadb.client
	liquibaseRuntime libs.liquibase.core
	liquibaseRuntime libs.liquibase.hibernate6
	liquibaseRuntime libs.picocli
	liquibaseRuntime libs.mariadb.client
}

configurations {
	liquibaseRuntime.extendsFrom runtimeClasspath
}

docker {
	registryCredentials {
		username = project.hasProperty("dockerHubUserName") ? project.dockerHubUserName : null
		password = project.hasProperty("dockerHubPassword") ? project.dockerHubPassword : null
	}
	url = project.hasProperty("dockerUrl") ? project.dockerUrl : "http://localhost:2375"
}

task buildDockerImage(type: DockerBuildImage) {
	inputDir = mkdir("build/docker")
	images = ["${dockerImageName}:${project.ext.docker_tag}"]
	doFirst {
		copy {
			from "data"
			into "$inputDir.asFile.orNull/json"
		}
		copy {
			from "src/main/liquibase"
			into "$inputDir.asFile.orNull/changelogs"
			exclude "liquibase-task.properties"
		}
		copy {
			from "src/main/docker/Dockerfile"
			from "src/main/docker/update.sh"
			into inputDir
		}
	}
}

task pushDockerImage(type: DockerPushImage, dependsOn: buildDockerImage) {
	images = ["${dockerImageName}:${project.ext.docker_tag}"]
}

task pathingJar(type: Jar) {
	dependsOn configurations.runtimeClasspath
	archiveAppendix = 'pathing'
	doFirst {
		manifest {
			attributes "Class-Path": configurations.runtimeClasspath.files.collect {
				it.toURL().toString().replaceFirst(/file:\/+/, '/')
			}.join(' ')
		}
	}
}

bootRun {
	dependsOn pathingJar
	doFirst {
		classpath = files(sourceSets.main.output.files, pathingJar.archivePath)
	}
	enableAssertions = true
}

bootJar {
	archiveClassifier = "full"
}

liquibase {
	activities {
		updateMain {
			changelogFile "dbinit/src/main/liquibase/changelog.yml"
			url "$System.env.YONA_DB_URL"
			username "$System.env.YONA_DB_USER_NAME"
			password "$System.env.YONA_DB_PASSWORD"
			logLevel "info"
		}
		diffMain {
			changelogFile "dbinit/src/main/liquibase/updates/changelog-0000-yd-000.yml"
			url "$System.env.YONA_DB_URL"
			username "$System.env.YONA_DB_USER_NAME"
			password "$System.env.YONA_DB_PASSWORD"
			logLevel "info"
			referenceUrl "hibernate:spring:nu.yona.server" \
				+ "?dialect=" + applicationProps.getProperty("spring.jpa.database-platform") \
				+ "&hibernate.physical_naming_strategy=org.hibernate.boot.model.naming.CamelCaseToUnderscoresNamingStrategy"
			referenceDriver "liquibase.ext.hibernate.database.connection.HibernateDriver"
			referenceDefaultCatalogName "yona"
			referenceDefaultSchemaName "yona"
			excludeObjects "databasechangelog.*,batch_job_.*,batch_step_.*,qrtz_.*"
		}
	}
	runList = project.ext.runList
}
