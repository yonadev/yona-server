buildscript {
  dependencies {
	classpath libs.liquibase.core
  }
}

plugins {
  alias(libs.plugins.liquibase)
}

description = "Database initializer"

import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage

def dockerImageName = "${project.group}/yona-mariadb-liquibase-update"
Properties applicationProps = new Properties()
applicationProps.load(new FileInputStream("core/src/main/resources/application.properties"))

configurations {
	liquibaseRuntime.extendsFrom runtimeClasspath
}

dependencies {
	implementation project(":core")
	implementation libs.spring.batch.core
	runtimeClasspath libs.mariadb.client
	liquibaseRuntime libs.liquibase.core
	liquibaseRuntime libs.liquibase.hibernate6
	liquibaseRuntime libs.picocli
}

tasks.register("pathingJar", Jar) {
	dependsOn configurations.runtimeClasspath
	archiveAppendix = "pathing"
	doFirst {
		manifest {
			attributes "Class-Path": configurations.runtimeClasspath.files.collect {
				it.toURL().toString().replaceFirst(/file:\/+/, "/")
			}.join(" ")
		}
	}
}

// ---- Boot Run Configuration ----
bootRun {
	enableAssertions = true
	dependsOn tasks.named("pathingJar")
	doFirst {
		classpath = files(sourceSets.main.output.files, tasks.named("pathingJar").get().archiveFile)
	}
}

// ---- Jar Packaging ----
bootJar {
	archiveClassifier = "full"
}

// ---- Docker Configuration ----
docker {
	registryCredentials {
		username = project.findProperty("dockerHubUserName")
		password = project.findProperty("dockerHubPassword")
	}
	url = project.findProperty("dockerUrl") ?: "http://localhost:2375"
}

tasks.register("buildDockerImage", DockerBuildImage) {
	dependsOn bootJar
	def dockerBuildDir = file("$buildDir/docker")
	inputDir = dockerBuildDir
	images = ["${dockerImageName}:${project.ext.docker_tag}"]

	doFirst {
		dockerBuildDir.mkdirs()

		copy {
			from "data"
			into "$inputDir.asFile.orNull/json"
		}

		copy {
			from "src/main/liquibase"
			into "$inputDir.asFile.orNull/changelogs"
			exclude "liquibase-task.properties"
		}

		copy {
			from "src/main/docker/Dockerfile"
			from "src/main/docker/update.sh"
			into inputDir
		}
	}
}

tasks.register("pushDockerImage", DockerPushImage) {
	dependsOn tasks.named("buildDockerImage")
	images = ["${dockerImageName}:${project.ext.docker_tag}"]
}


liquibase {
	activities {
		updateMain {
			changelogFile "dbinit/src/main/liquibase/changelog.yml"
			url "$System.env.YONA_DB_URL"
			username "$System.env.YONA_DB_USER_NAME"
			password "$System.env.YONA_DB_PASSWORD"
			logLevel "info"
		}
		diffMain {
			changelogFile "dbinit/src/main/liquibase/updates/changelog-0000-yd-000.yml"
			url "$System.env.YONA_DB_URL"
			username "$System.env.YONA_DB_USER_NAME"
			password "$System.env.YONA_DB_PASSWORD"
			logLevel "info"
			referenceUrl "hibernate:spring:nu.yona.server" \
				+ "?dialect=" + applicationProps.getProperty("spring.jpa.database-platform") \
				+ "&hibernate.physical_naming_strategy=org.hibernate.boot.model.naming.CamelCaseToUnderscoresNamingStrategy"
			referenceDriver "liquibase.ext.hibernate.database.connection.HibernateDriver"
			referenceDefaultCatalogName "yona"
			referenceDefaultSchemaName "yona"
			excludeObjects "databasechangelog.*,batch_job_.*,batch_step_.*,qrtz_.*"
		}
	}
	runList = project.ext.runList
}
